<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Contemplating Software</title>
  <link href="https://blog.biniko.me/atom.xml" rel="self"/>
  <link href="https://blog.biniko.me"/>
  <updated>2024-06-18T05:00:45+00:00</updated>
  <id>https://blog.biniko.me</id>
  <author>
    <name>Seung-Bin Bae</name>
  </author>
  <entry>
    <id>https://blog.biniko.me/0006-loop-to-tail-recursion-fibonacci.html</id>
    <link href="https://blog.biniko.me/0006-loop-to-tail-recursion-fibonacci.html"/>
    <title>Fibonacci Tail Recursion</title>
    <updated>2024-06-17T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<h1 id="loop_-%3E_tail_recursion_fibonacci">Loop -> Tail Recursion Fibonacci</h1><p>Fibonacci tail recursion in JavaScript and Clojure. Conversion from iteration to recursion is done in the same ways as the <a href='https://blog.biniko.me/0005-loop-to-tail-recursion-basic.html'>basic conversion</a>. Some steps are skipped to make the conversion concise.</p><h3 id="non-tail_recursion_version">Non-tail recursion version</h3><pre><code>// Recursion, but not tail call. Simple and easy to understand, but very slow.
// Note that negative numbers are not handled correctly to make it simpler throughout this post.
function fib&#40;n&#41; {
  if &#40;n &lt;= 1&#41; return n;
  return fib&#40;n - 1&#41; + fib&#40;n - 2&#41;;
}
</code></pre><h3 id="iteration_version">Iteration version</h3><pre><code>function fib&#40;n&#41; {
  let curr = 0;
  let next = 1;
  let i = 1;
  while &#40;i &lt;= n&#41; {
    let prev = curr;
    curr = next;
    next = prev + curr;
    i++;
  }
  return curr;
}
</code></pre><h3 id="intermediate_step_before_tail_recursion">Intermediate step before tail recursion</h3><pre><code>// - move loop condition to inside of while
// - return termination case early
// - use destructuring to assign variables
// - make index descreasing
function fib&#40;n&#41; {
  let &#91;i, curr, next&#93; = &#91;n, 0, 1&#93;;
  while &#40;true&#41; {
    if &#40;i &lt;= 0&#41; return curr;
    &#91;i, curr, next&#93; = &#91;i - 1, next, curr + next&#93;;
  }
}
</code></pre><h3 id="unnecessary_step%3A_add_label_and_continue">Unnecessary step: add label and continue</h3><pre><code>function fib&#40;n&#41; {
  let &#91;i, curr, next&#93; = &#91;n, 0, 1&#93;;
  loop: while &#40;true&#41; {
    if &#40;i &lt;= 0&#41; return curr;
    &#91;i, curr, next&#93; = &#91;i - 1, next, curr + next&#93;;
    continue loop;
  }
}
</code></pre><h3 id="tail_recursion_with_inner_function">Tail recursion with inner function</h3><pre><code>function fib&#40;n&#41; {
  const loop = &#40;i, curr, next&#41; =&gt; {
    if &#40;i &lt;= 0&#41; return curr;
    return loop&#40;i - 1, next, curr + next&#41;;
  }
  return loop&#40;n, 0, 1&#41;;
}
</code></pre><h3 id="tail_recursion_with_default_parameters">Tail recursion with default parameters</h3><pre><code>function fib&#40;n, curr = 0, next = 1&#41; {
  if &#40;n &lt;= 0&#41; return curr;
  return fib&#40;n - 1, next, curr + next&#41;;
}
</code></pre><h3 id="one_liner">One liner</h3><pre><code>const fib = &#40;n, curr = 0, next = 1&#41; =&gt; n &lt;= 0 ? curr : fib&#40;n - 1, next, curr + next&#41;;
</code></pre><h3 id="clojure_multi-arity">Clojure Multi-arity</h3><pre><code>;;; Note that the condition is flipped from the JS version above.
&#40;defn fib
  &#40;&#91;n&#93; &#40;fib n 0 1&#41;&#41;
  &#40;&#91;n curr next&#93; &#40;if &#40;pos? n&#41; &#40;recur &#40;dec n&#41; next &#40;+ curr next&#41;&#41; curr&#41;&#41;&#41;
</code></pre><h3 id="clojure_loop">Clojure Loop</h3><pre><code>&#40;defn fib &#91;n&#93;
  &#40;loop &#91;i n, curr 0, next 1&#93;
    &#40;if &#40;pos? i&#41; &#40;recur &#40;dec i&#41; next &#40;+ curr next&#41;&#41; curr&#41;&#41;&#41;
</code></pre>]]></content>
  </entry>
  <entry>
    <id>https://blog.biniko.me/0005-loop-to-tail-recursion-basic.html</id>
    <link href="https://blog.biniko.me/0005-loop-to-tail-recursion-basic.html"/>
    <title>Convert Loop to Tail Recursion Basic</title>
    <updated>2024-06-07T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>Converting very basic loop to tail recursion using JavaScript and Clojure at the end.</p><h2 id="for-loop_version">For-loop version</h2><pre><code>// Sum integer from 1 to n &#40;inclusive&#41;.
function sumTo&#40;n&#41; {
  let res = 0;
  for &#40;i = 1; i &lt;= n; i++&#41; {
    res += i;
  }
  return res;
}
</code></pre><h2 id="while-loop_version">While-loop version</h2><pre><code>// For-loop is a syntactic sugar for while loop.
// Any for-loop can be changed to while loop.
function sumTo&#40;n&#41; {
  let res = 0;
  let i = 1;
  while &#40;i &lt;= n&#41; {
    res += i;
    i++;
  }
  return res;
}
</code></pre><h2 id="while_%28true%29_loop_version">While (true) loop version</h2><pre><code>// We can move the condition of while loop to inside the loop with break
function sumTo&#40;n&#41; {
  let res = 0;
  let i = 1;
  while &#40;true&#41; {
    if &#40;i &lt;= n&#41; {
      res += i;
      i++;
    } else {
      break;
    }
  }
  return res;
}
</code></pre><h2 id="make_it_return_early_in_while_loop">Make it return early in while loop</h2><pre><code>function sumTo&#40;n&#41; {
  let res = 0;
  let i = 1;
  while &#40;true&#41; {
    if &#40;i &gt; n&#41; {
      return res
    }    
    res += i;
    i++;
  }
  // This is unreachable, return statement here can be removed
}
</code></pre><h2 id="make_the_index_decreasing_instead_of_increasing">Make the index decreasing instead of increasing</h2><pre><code>function sumTo&#40;n&#41; {
  let res = 0;
  let i = n;
  while &#40;true&#41; {
    if &#40;i &lt;= 0&#41; {
      return res;
    }    
    res += i;
    i--;
  }
}
</code></pre><h2 id="use_destructuring">Use destructuring</h2><pre><code>function sumTo&#40;n&#41; {
  let &#91;res, i&#93; = &#91;0, n&#93;;
  while &#40;true&#41; {
    if &#40;i &lt;= 0&#41; {
      return res;
    }    
    &#91;res, i&#93; = &#91;res + i, i - 1&#93;;
  }
}
</code></pre><h2 id="use_labeled_statement_and_continue">Use labeled statement and continue</h2><pre><code>function sumTo&#40;n&#41; {
  let &#91;res, i&#93; = &#91;0, n&#93;;
  loop: while &#40;true&#41; {
    if &#40;i &lt;= 0&#41; {
      return res;
    }    
    &#91;res, i&#93; = &#91;res + i, i - 1&#93;;
    continue loop; // Sure, this is unnecessary, but added for the next step
  }
}
</code></pre><h2 id="use_labeled_statement_and_continue_%28commented%29">Use labeled statement and continue (Commented)</h2><pre><code>function sumTo&#40;n&#41; {
  let &#91;res, i&#93; = &#91;0, n&#93;; // Initialization. These will be the initial value for the inner recursion function
  loop: while &#40;true&#41; { // This will become the inner recursion function which take &#40;res, i&#41; as parameters
    if &#40;i &lt;= 0&#41; { // termination condition of the recursion
      return res;
    }    
    &#91;res, i&#93; = &#91;res + i, i - 1&#93;; // These are the new values of res and i when not terminated.
                                 // These will be carried to the next step &#40;recursive call&#41;.
    continue loop; // This will be recursive call with new params from the above line
  }
}
</code></pre><h2 id="tail-recursion_version">Tail-Recursion Version</h2><pre><code>function sumTo&#40;n&#41; {
  // Inner function for tail recursion.
  const loop = &#40;res, i&#41; =&gt; {
    if &#40;i &lt;= 0&#41; { // Same termination condition. No need to change
      return res;
    }
    // Recursive call with values for next step.
    return loop&#40;res + i, i - 1&#41;;
  }

  // Delegate to inner function with the params same as the initial values of the loop version.
  return loop&#40;0, n&#41;;
}
</code></pre><h2 id="tail-recursion_version_with_flipped_parameter_order">Tail-Recursion Version with flipped parameter order</h2><pre><code>function sumTo&#40;n&#41; {
  const loop = &#40;i, res&#41; =&gt; {
    if &#40;i &lt;= 0&#41; {
      return res;
    }
    return loop&#40;i - 1, res + i&#41;;
  }
  return loop&#40;n, 0&#41;;
}
</code></pre><h2 id="tail-recursion_version_with_default_parameter_%28no_inner_function%29">Tail-Recursion Version with default parameter (no inner function)</h2><pre><code>// Initial value of the previous version is set as the default value of res.
// Since the inner function &#40;loop&#41; is removed, sumTo will be directly called.
// We don't need variable i anymore. It is replaced by n.
function sumTo&#40;n, res = 0&#41; {
  if &#40;n &lt;= 0&#41; {
    return res;
  }
  return sumTo&#40;n - 1, res + n&#41;;
}
</code></pre><h2 id="one_liner_with_tertiary_operation">One liner with tertiary operation</h2><pre><code>const sumTo = &#40;n, res = 0&#41; =&gt; &#40;n &lt;= 0&#41; ? res : sumTo&#40;n - 1, res + n&#41;;
</code></pre><h2 id="clojure_version_multi-arity_version">Clojure version Multi-arity Version</h2><pre><code>;;; Clojure doesn't support default parameters.
;;; Multi-arity function can be used instead of inner function.
;;; In clojure, recur needs to be used to perform tail recursion with tail-call optimization.
&#40;defn sumTo
 &#40;&#91;n&#93; &#40;sumTo n 0&#41;&#41;  ; call with res = 0
 &#40;&#91;n res&#93;
   &#40;if &#40;&lt;= n 0&#41;  ; termination condition 
     res  ; return res when terminated
     &#40;recur &#40;dec n&#41; &#40;+ res n&#41;&#41;&#41;&#41;&#41;  ; recursive case
</code></pre><h2 id="clojure_version_loop_version">Clojure version Loop Version</h2><pre><code>;;; Loop macro can be used to have tail recursion in the middle of the function.
&#40;defn sumTo &#91;n&#93;
 ;; initialize the loop with i to n and res to 0
 ;; this becomes the target for recur below
 ;; comma is unnecessary, but added for clarity
 &#40;loop &#91;i n, res 0&#93;
   &#40;if &#40;&lt;= i 0&#41; res &#40;recur &#40;dec i&#41; &#40;+ res i&#41;&#41;&#41;&#41;&#41;
</code></pre>]]></content>
  </entry>
</feed>
